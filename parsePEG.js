parsePEG.names=['','PropSpec','BinaryUnicodeProperty','UnicodeProperty','PropVal','ScriptOrCatPropVal','UPlusCodePoint','PositiveSpec','NegativeSpec','CodePoint','CodePointLit','CodePointFrom','CodePointTo','CodePointRange','UnicodePropSpec','CodePointExpr','CharSetUnion','CharSetIntersection','HEXDIG','CharSetDifference','CharEscape','CharSetExpr','StrLit','CharSet','PosCharSet','NegCharSet','Empty','AtomicExpr','ParenthExpr','Replicand','N','M','Optional','MNRep','PosRep','AnyRep','SeqUnit','Sequence','IdentChar','IdentStartChar','OrdChoice','S','SpaceAtom','LB','NonTerminal','Comment','Rule','RuleSet','PosLookahead','NegLookahead','_'];
function parsePEG(out){var eof=false,s='',l=0,S=204800,T,M,F,R,tbl=[],x,pos=0,offset=0,buf=[],bufs=[],states=[],posns=[],c;
T=[,860160,917504,924166,940550,956934,1034758,834246,973510,1019904,1097728,1015808,1101824,1003520,819200,802816,756230,708608,1093632,663552,1163264,647168,1138688,593920,1106116,608966,589824,569344,557252,544768,1265664,1257472,1273856,1220608,1212416,536576,499712,453126,319488,315392,381124,326150,339968,360448,303104,270336,282624,208896,1282244,1290436,1298432,215558,217088,221184,187055,191151,236038,240326,241664,178695,249856,178695,258048,187055,191151,322,323,278528,324,182959,170503,325,170503,166575,162311,311296,158215,326,327,327680,174599,335872,174599,344064,328,352256,178695,328,367110,368640,329,330,331,385024,170503,322,154287,401408,170503,322,416262,417988,332,425984,170503,322,154287,442368,170503,322,457222,458752,150191,466944,170503,322,481798,483328,150191,491520,170503,322,503808,146095,141999,137903,133807,117423,199343,203439,113327,121519,333,548864,117423,113327,334,166575,335,573440,109231,96943,182959,92847,336,598016,105135,101039,610304,337,338,622592,170503,322,634880,88751,322,339,80559,655360,170503,322,72367,674310,676036,679936,170503,322,340,696320,170503,322,72367,68271,719366,721092,724992,170503,322,341,741376,170503,322,68271,760326,761856,64175,770048,170503,322,784902,786432,64175,794624,170503,322,806912,60079,55983,39599,823296,31407,35503,835584,337,342,6831,851968,342,339,864256,10927,872448,15023,880640,343,344,19119,897024,23215,907782,909508,345,23215,15023,925696,346,933888,346,942080,346,950272,346,958464,346,966656,346,974848,337,342,338,6831,995328,342,339,47791,347,51887,39599,1024000,27311,43695,1036288,348,349,1048576,76295,76295,76295,76295,1071622,1073152,76295,1081344,76295,322,322,350,351,39599,337,1114112,170503,322,1126400,88751,322,339,352,1146880,1150976,84655,353,352,1169926,1171456,354,1179648,76295,76295,76295,76295,322,1204224,354,355,121519,349,121519,356,129711,1239558,1241284,357,125615,322,358,1261568,359,1269760,359,121519,360,361,150191,362,150191,195247,1306624,363]
M=[,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,229376,320,320,320,236038,253952,245760,320,249856,320,320,320,320,274432,320,278528,286916,291012,295108,299008,320,307200,320,311296,320,320,320,331776,320,335872,320,320,320,356352,320,320,320,372736,320,320,393216,320,320,397508,409600,320,320,320,416262,422084,434176,320,320,438468,320,320,320,320,475136,463044,320,320,320,320,481798,487620,320,320,320,320,320,320,320,320,320,320,320,320,540868,320,320,320,320,561152,565444,320,320,320,320,320,320,320,320,320,320,618692,614400,320,630784,320,320,643268,320,320,320,651460,320,320,320,667648,320,674310,688324,320,320,692420,704512,320,320,320,712704,320,719366,733380,320,320,737476,749568,320,320,320,320,778240,766148,320,320,320,320,784902,790724,320,320,320,320,320,320,320,320,320,320,843776,839680,320,850630,320,856064,320,320,320,320,876740,888832,320,320,320,320,901120,320,907782,913408,320,320,320,929792,320,933888,320,946176,320,950272,320,962560,320,966656,987136,978944,983040,320,993990,320,999424,320,1007812,1011712,320,320,320,320,320,1047046,1040384,320,320,1052672,1056768,1060864,1064960,320,320,1077248,320,320,320,320,320,320,320,1110212,1122304,320,320,1134788,320,320,320,1142784,1159168,1146880,320,320,320,320,320,1178118,320,1183744,1187840,1191936,1196032,320,320,1208320,320,1216708,320,1224900,1228800,1232896,1253572,320,1245184,320,320,320,320,1261568,320,1269760,1278148,320,1286144,320,1294336,320,1302528,320,321]
F=[,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,266240,321,225280,321,321,320,321,321,321,320,321,262144,321,321,321,321,320,321,321,321,321,321,321,321,320,321,321,321,321,321,320,321,350726,321,321,321,321,376832,321,321,321,321,389120,321,321,321,405504,321,321,320,321,321,430080,321,321,321,446464,321,321,321,321,321,471040,321,321,320,321,321,495616,321,321,507904,512000,516096,520192,524288,528384,532480,321,321,321,321,552960,321,321,321,321,321,577536,581632,585728,321,321,321,602112,321,321,321,321,321,626688,321,321,638976,321,321,321,321,659456,321,321,321,320,321,684032,321,321,321,700416,321,321,321,321,320,321,729088,321,321,321,745472,321,321,321,321,321,321,774144,321,321,320,321,321,798720,321,321,811008,815104,321,321,827392,321,321,321,321,321,321,321,321,321,870918,895494,321,321,884736,321,321,321,321,321,320,321,321,321,321,321,321,320,321,321,321,320,321,321,321,320,321,321,321,321,321,321,321,321,321,321,321,321,321,1028096,321,321,321,321,321,321,321,321,321,321,1089536,321,321,1085440,321,321,321,321,321,321,321,1118208,321,321,1130496,321,321,321,321,320,1155268,321,321,321,1202694,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,1249280,321,321,321,321,321,320,321,320,321,321,321,321,321,321,321,321,320]
if(typeof out=='string'){s=out;out=[];x=parsePEG(function(m,x,y){if(m=='fail')out=[false,x,y];if(m=='tree segment')out=out.concat(x)});x('chunk',s);x('eof');return out[0]===false?out:[true,out]}
return function(m,x){switch(m){
case 'chunk':s+=x;l=s.length;while(tbl.length<l+1)tbl.push([]);mainloop();break
case 'eof':eof=true;mainloop();break
default:throw new Error('unhandled message: '+m)}}
function mainloop(){for(;;){
if(S>363||S<322)t_block:{
if(S&4/*pushpos*/)posns.push(pos)
if(S&2/*t_bufferout*/){bufs.push(buf);buf=[]}
if(S&1/*cache*/&&(x=tbl[pos-offset][S])!=undefined){if(x){R=true;pos=x[0];buf=x[1]}else{R=false}break t_block}
if(S&8/*t_emitstate*/){buf.push(S>>>12)}
states.push(S)
S=T[S>>>12]}
if(S<364&&S>321){
if(S==322)R=true
else{
c=s.charCodeAt(pos);if(isNaN(c)){if(eof)R=false;else{emit();R=undefined;out('ready');return}}
else switch(S){
case 323:R=c<59?0:c<60?1:0;break
case 324:R=c<0?0:c<10?1:c<11?0:c<13?1:c<14?0:c<55296?1:c<57344?0:c<65536?1:0;break
case 325:R=c<8592?0:c<8593?1:0;break
case 326:R=c<65?0:c<91?1:0;break
case 327:R=c<48?0:c<58?1:c<65?0:c<91?1:c<95?0:c<96?1:c<97?0:c<123?1:0;break
case 328:R=c<32?0:c<33?1:0;break
case 329:R=c<13?0:c<14?1:0;break
case 330:R=c<10?0:c<11?1:0;break
case 331:R=c<10?0:c<11?1:c<13?0:c<14?1:0;break
case 332:R=c<47?0:c<48?1:0;break
case 333:R=c<42?0:c<43?1:0;break
case 334:R=c<40?0:c<41?1:0;break
case 335:R=c<41?0:c<42?1:0;break
case 336:R=c<1013?0:c<1014?1:0;break
case 337:R=c<91?0:c<92?1:0;break
case 338:R=c<94?0:c<95?1:0;break
case 339:R=c<93?0:c<94?1:0;break
case 340:R=c<8722?0:c<8723?1:0;break
case 341:R=c<8745?0:c<8746?1:0;break
case 342:R=c<58?0:c<59?1:0;break
case 343:R=c<61?0:c<62?1:0;break
case 344:R=c<8800?0:c<8801?1:0;break
case 345:R=c<124?0:c<125?1:0;break
case 346:R=c<32?0:c<33?1:c<45?0:c<46?1:c<65?0:c<91?1:c<95?0:c<96?1:c<97?0:c<123?1:0;break
case 347:R=c<45?0:c<46?1:0;break
case 348:R=c<85?0:c<86?1:0;break
case 349:R=c<43?0:c<44?1:0;break
case 350:R=c<48?0:c<58?1:c<65?0:c<71?1:0;break
case 351:R=c<0?0:c<32?1:c<33?0:c<93?1:c<94?0:c<160?1:c<161?0:c<5760?1:c<5761?0:c<6158?1:c<6159?0:c<8192?1:c<8203?0:c<8239?1:c<8240?0:c<8287?1:c<8288?0:c<8722?1:c<8723?0:c<12288?1:c<12289?0:c<55296?1:c<57344?0:c<65536?1:0;break
case 352:R=c<34?0:c<35?1:0;break
case 353:R=c<0?0:c<34?1:c<35?0:c<92?1:c<93?0:c<55296?1:c<57344?0:c<65536?1:0;break
case 354:R=c<92?0:c<93?1:0;break
case 355:R=c<102?0:c<103?1:c<110?0:c<111?1:c<114?0:c<115?1:c<116?0:c<117?1:c<118?0:c<119?1:0;break
case 356:R=c<123?0:c<124?1:0;break
case 357:R=c<44?0:c<45?1:0;break
case 358:R=c<125?0:c<126?1:0;break
case 359:R=c<48?0:c<58?1:0;break
case 360:R=c<63?0:c<64?1:0;break
case 361:R=c<38?0:c<39?1:0;break
case 362:R=c<33?0:c<34?1:0;break
case 363:R=c<0?0:c<55296?1:c<57344?0:c<65536?1:0;break}
if(R)pos++
else if(c>=0xD800&&c<=0xDFFF){if(c<0xDB80){if(pos+1==l){if(eof)return fail('unmatched surrogate at EOF');else{emit();R=undefined;out('ready');return}}else{c=(c&0x3FF)<<10 | s.charCodeAt(pos+1)&0x3FF | 0x10000
switch(S){case 324:R=c<65536?0:1;break
case 351:R=c<65536?0:1;break
case 353:R=c<65536?0:1;break
case 363:R=c<65536?0:c<1114112?1:0;break
default:R=false}
if(R)pos+=2
}}else return fail('UTF-16 decoding error: unmatched low surrogate')}}
S=states.pop()}
while(R!=undefined){
if(S==204800){(R?emit:fail)();return}if(R){
if(S&1/*cache*/){tbl[posns[posns.length-1]][S]=[pos,buf];buf=buf.slice()}
if(S&16/*m_emitstate*/)buf.push(S>>>12)
if(S&32/*m_emitclose*/)buf.push(-2)
if(S&64/*m_emitanon*/)buf.push(-1)
if(S&128/*m_emitlength*/)buf.push(pos-posns[posns.length-1])
if(S&256/*m_resetpos*/)pos=posns[posns.length-1]
if(S&4/*pushpos*/)posns.pop()
if(S&1024/*m_tossbuf*/)buf=bufs.pop()
if(S&512/*m_emitbuf*/)buf=bufs.pop().concat(buf)
if(!bufs.length&&buf.length>64)emit()
S=M[S>>>12]}
else{
if(S&1/*cache*/)tbl[posns[posns.length-1]][S]=false
if(S&4/*pushpos*/)pos=posns.pop()
if(S&2048/*f_tossbuf*/)buf=bufs.pop()
S=F[S>>>12]}
if(S==320){R=true;S=states.pop()}else if(S==321){R=false;S=states.pop()}else R=undefined;
}}}
function emit(){var x=bufs.length?bufs[0]:buf;if(x.length){out('tree segment',x);if(bufs.length)bufs[0]=[];else buf=[]}}
function fail(s){out('fail',pos,s)}}
