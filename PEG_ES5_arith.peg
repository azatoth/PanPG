; Exprs

Expr ←
  AssignmentExpr (S? "," S? AssignmentExpr)*

AssignmentExpr ←
   LeftHandSideExpr S? AssignmentOperator S? AssignmentExpr
 / ConditionalExpr

AssignmentOperator ←
  "=" !("=") / "*=" / "/=" / "%=" / "+=" / "-=" / "<<=" / ">>=" / ">>>=" / "&=" / "^=" / "|="

ConditionalExpr ←
  LogicalOrExpr (S? "?" S? AssignmentExpr S? ":" S? AssignmentExpr)?

LogicalOrExpr ←
  LogicalAndExpr (S? "||" S? LogicalAndExpr)*

LogicalAndExpr ←
  BitwiseOrExpr (S? "&&" S? BitwiseOrExpr)*

BitwiseOrExpr ←
  BitwiseXOrExpr (S? "|" !("=") S? BitwiseXOrExpr)*

BitwiseXOrExpr ←
  BitwiseAndExpr (S? "^" !("=") S? BitwiseAndExpr)*

BitwiseAndExpr ←
  EqualityExpr (S? "&" !("=") S? EqualityExpr)*

EqualityExpr ←
  RelationalExpr (S? EqualityOp S? RelationalExpr)*

EqualityOp ← "===" / "!==" / "==" / "!="

RelationalExpr ←
  ShiftExpr (S? RelationalOp S? ShiftExpr)*

RelationalOp ←
  "<=" / ">=" / "<" / ">" / InstanceOfTok / InTok

ShiftExpr ←
  AdditiveExpr (S? ShiftOp S? AdditiveExpr)*

ShiftOp ←
  "<<" / ">>>" / ">>"

AdditiveExpr ←
  MultiplicativeExpr (S? AdditiveOp S? MultiplicativeExpr)*

AdditiveOp ←
   "+" !("+"/"=")
 / "-" !("-"/"=")

MultiplicativeExpr ←
  UnaryExpr (S? MultiplicativeOp S? UnaryExpr)*

MultiplicativeOp ←
  ("*" / "/" / "%") !("=")

UnaryExpr ←
   PostfixExpr
 / DeleteTok S? UnaryExpr
 / VoidTok S? UnaryExpr
 / TypeofTok S? UnaryExpr
 / "++" S? UnaryExpr
 / "--" S? UnaryExpr
 / "+" S? UnaryExpr
 / "-" S? UnaryExpr
 / "~" S? UnaryExpr
 / "!" S? UnaryExpr

PostfixExpr ←
  LeftHandSideExpr (SnoLB? ("++"/"--"))?

LeftHandSideExpr ←
   CallExpr
 / NewExpr

CallExpr ←
  MemberExpr S? Arguments (S? Arguments / S? "[" S? Expr S? "]" / S? "." S? IdentifierName)*

Arguments ←
  "(" S? ArgumentList? S? ")"

ArgumentList ←
  AssignmentExpr (S? "," S? AssignmentExpr)*

NewExpr ←
   MemberExpr
 / NewTok S? NewExpr

MemberExpr ←
  ( PrimaryExpr
  / NewTok S? MemberExpr S? Arguments
  ) ( S? "[" S? Expr S? "]"
    / S? "." S? IdentifierName
    )*

PrimaryExpr ←
   ThisTok
 / Identifier
 / Literal
 / ArrayLiteral
 / ObjectLiteral
 / "(" S? Expr S? ")"

ArrayLiteral ←
   "[" Elision? S? "]"
 / "[" ElementList S? "]"
 / "[" ElementList S? "," Elision? S? "]"

ElementList ←
  Elision? S? AssignmentExpr (S? "," Elision? S? AssignmentExpr)*

Elision ←
  (S? ",")+

ObjectLiteral ←
  "{" ( S? PropertyNameAndValueList S? ","? )? S? "}"

PropertyNameAndValueList ←
  PropertyAssignment (S? "," S? PropertyAssignment)*

PropertyAssignment ←
   PropertyName S? ":" S? AssignmentExpr

PropertyName ←
  IdentifierName / StringLiteral / NumericLiteral

; Lexical tokens

Literal
  ← NullLiteral
  / BooleanLiteral
  / NumericLiteral
  / StringLiteral
  / RegularExpressionLiteral

NullLiteral
  ← NullTok

BooleanLiteral
  ← TrueTok
  / FalseTok

NumericLiteral                  ← DecimalLiteral !(IdentifierStart)
                                / HexIntegerLiteral !(IdentifierStart)

DecimalLiteral                  ← DecimalIntegerLiteral "." DecimalDigit* ExponentPart?
                                / "." DecimalDigit+ ExponentPart?
                                / DecimalIntegerLiteral ExponentPart?

DecimalIntegerLiteral           ← "0"
                                / [1-9] DecimalDigit*

DecimalDigit                    ← [0-9]

ExponentPart                    ← [eE] SignedInteger

SignedInteger                   ← DecimalDigit+
                                / "+" DecimalDigit+
                                / "-" DecimalDigit+

HexIntegerLiteral               ← "0x" HexDigit+
                                / "0X" HexDigit+

DQ                              ← [U+0022]
SQ                              ← [U+0027]

StringLiteral                   ← DQ DoubleStringCharacter* DQ
                                / SQ SingleStringCharacter* SQ

RS                              ← [U+005C]

DoubleStringCharacter           ← !( DQ / RS / LineTerminator ) SourceCharacter
                                / RS EscapeSequence
                                / LineContinuation

SingleStringCharacter           ← !( SQ / RS / LineTerminator ) SourceCharacter
                                / RS EscapeSequence
                                / LineContinuation

LineContinuation                ← RS LineTerminatorSequence

EscapeSequence                  ← CharacterEscapeSequence
                                / "0" !(DecimalDigit)
                                / HexEscapeSequence
                                / UnicodeEscapeSequence

CharacterEscapeSequence         ← SingleEscapeCharacter
                                / NonEscapeCharacter

SingleEscapeCharacter           ← [ U+0027 U+0022 U+005C b f n r t v ]

NonEscapeCharacter              ← !(EscapeCharacter / LineTerminator) SourceCharacter

EscapeCharacter                 ← SingleEscapeCharacter
                                / DecimalDigit
                                / [ x u ]

HexEscapeSequence               ← "x" HexDigit HexDigit

UnicodeEscapeSequence           ← "u" HexDigit{4}

RegularExpressionLiteral        ← "/" RegularExpressionBody "/" RegularExpressionFlags

RegularExpressionBody           ← RegularExpressionFirstChar RegularExpressionChar*

RegularExpressionFirstChar      ← !( LineTerminator / [ * U+005C / [ ] ) SourceCharacter
                                / RegularExpressionBackslashSequence
                                / RegularExpressionClass

RegularExpressionChar           ← !( LineTerminator / [ U+005C / [ ] ) SourceCharacter
                                / RegularExpressionBackslashSequence
                                / RegularExpressionClass

RegularExpressionBackslashSequence ← RS !(LineTerminator) SourceCharacter

RegularExpressionClass          ← "[" RegularExpressionClassChar* "]"

RegularExpressionClassChar      ← !(LineTerminator / [ U+005C U+005D ]) SourceCharacter
                                / RegularExpressionBackslashSequence

RegularExpressionFlags          ← IdentifierPart*

SourceCharacter                 ← [ U+0000-U+10FFFF ]

WhiteSpace                      ← [ U+0009 
                                    U+000B
                                    U+000C
                                    U+0020
                                    U+0085
                                    U+00A0
                                    U+200B
                                    U+FEFF
                                    [:Zs:] ]

LF                              ← [ U+000A ]
CR                              ← [ U+000D ]
LS                              ← [ U+2028 ]
PS                              ← [ U+2029 ]

LineTerminator                  ← LF / CR / LS / PS

LineTerminatorSequence          ← LF / CR LF / CR / LS / PS

Comment                         ← MultiLineComment
                                / SingleLineComment

MultiLineComment                ← "/*" (!("*/") SourceCharacter)* "*/"

MultiLineCommentNoLB            ← "/*" (!("*/") !(LineTerminator) SourceCharacter)* "*/"

SingleLineComment               ← "//" [^ U+000A U+000D U+2028 U+2029 ]*

S ← ( WhiteSpace / LineTerminatorSequence / Comment )+

SnoLB ← ( WhiteSpace / SingleLineComment / MultiLineCommentNoLB )+

ReservedWord
 ← ( Keyword
   / FutureReservedWord
   / "null"
   / "true"
   / "false"
   ) !(IdentifierPart)

Keyword
 ← "break" / "case" / "catch" / "continue" / "debugger" / "default" / "delete" / "do" / "else" / "finally" / "for" / "function" / "if" / "instanceof" / "in" / "new" / "return" / "switch" / "this" / "throw" / "try" / "typeof" / "var" / "void" / "while" / "with"

FutureReservedWord
 ← "abstract" / "boolean" / "byte" / "char" / "class" / "const" / "double" / "enum" / "export" / "extends" / "final" / "float" / "goto" / "implements" / "import" / "interface" / "int" / "long" / "native" / "package" / "private" / "protected" / "public" / "short" / "static" / "super" / "synchronized" / "throws" / "transient" / "volatile"

Identifier                      ← !(ReservedWord) IdentifierName

IdentifierName                  ← IdentifierStart IdentifierPart*

IdentifierStart                 ← UnicodeLetter
                                / "$"
                                / "_"
                                / RS UnicodeEscapeSequence

IdentifierPart                  ← IdentifierStart
                                / [ [:Mn:] [:Mc:]
                                    [:Nd:]
                                    [:Pc:] ]

UnicodeLetter                   ← [ [:Lu:]
                                    [:Ll:]
                                    [:Lt:]
                                    [:Lm:]
                                    [:Lo:]
                                    [:Nl:] ]

HexDigit                        ← [ 0-9 a-f A-F ]

; generated by ECMAScript_unified_tokens in ECMAScript_outputs.js

FalseTok ← "false" !(IdentifierPart)
TrueTok ← "true" !(IdentifierPart)
NullTok ← "null" !(IdentifierPart)
InTok ← "in" !(IdentifierPart)
InstanceOfTok ← "instanceof" !(IdentifierPart)
DeleteTok ← "delete" !(IdentifierPart)
NewTok ← "new" !(IdentifierPart)
ThisTok ← "this" !(IdentifierPart)
TypeofTok ← "typeof" !(IdentifierPart)
VoidTok ← "void" !(IdentifierPart)